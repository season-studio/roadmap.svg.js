{"version":3,"file":"index.js","sources":["../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/@babel/runtime/regenerator/index.js","../src/toolkits/src/assert.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","../src/toolkits/src/readonly.js","../src/ns.js","../src/timeScale.js","../src/expression.js","../src/sampleProjects.js","../src/index.js","../node_modules/@babel/runtime/helpers/esm/classCallCheck.js"],"sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","module.exports = require(\"regenerator-runtime\");\n","/**\r\n * assert\r\n * @param {*} _cond the condition the be asserted\r\n * @param {*|Function} _error the error will be throw if fail, if take a function as this parameter, the function's result will be throw as an error \r\n * @returns {*} the same as the \"_cond\" parameter\r\n */\r\nexport function assert(_cond, _error) {\r\n    if (_cond) {\r\n        return _cond;\r\n    } else {\r\n        throw typeof _error === \"function\" ? _error.apply(undefined, [...arguments].slice(2)): _error;\r\n    }\r\n}\r\n","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","/**\r\n * define readonly member is an object\r\n * @param {*} _obj the target object instance the member will be defined\r\n * @param {String|Object} _prop the member's key, or an object the member's of which will be copy into the target object\r\n * @param {*} _value if the _prop is String, this parameter means the value of the member\r\n * @returns {*} the same of \"_obj\"\r\n */\r\nexport function readonlyMember(_obj, _prop, _value) {\r\n    if (_obj && _prop) {\r\n        if (typeof _prop === \"object\") {\r\n            for (let item in _prop) {\r\n                Object.defineProperty(_obj, item, {\r\n                    value: _prop[item], \r\n                    writable: false,\r\n                    enumerable: true\r\n                });\r\n            }\r\n        } else {\r\n            Object.defineProperty(_obj, _prop, {\r\n                value: _value, \r\n                writable: false,\r\n                enumerable: true\r\n            });\r\n        }\r\n    }\r\n    return _obj;\r\n}","\r\nexport default Object.freeze({\r\n    SVG: \"http://www.w3.org/2000/svg\",\r\n    ROADMAP: \"https://season-studio.github.io/roadmap/\"\r\n});","import { assert } from \"./toolkits/src/assert\";\r\n\r\n/**\r\n * find a time scale item according to the given time\r\n * @param {Number} _time the given time\r\n * @returns {Object} the scale item\r\n */\r\nfunction findTimeScaleItem(_time) {\r\n    const len = this.length;\r\n    let index = this.$lastLocation;\r\n    let stepIndex = 0;\r\n    do {\r\n        const item = this[index];\r\n        if (_time < item.$startTime) {\r\n            stepIndex || (stepIndex = -1);\r\n        } else if (_time >= item.$endTime) {\r\n            stepIndex || (stepIndex = 1);\r\n        } else {\r\n            this.$lastLocation = index;\r\n            return item;\r\n        }\r\n        index += stepIndex;\r\n    } while((index >= 0) && (index < len));\r\n}\r\n\r\n/**\r\n * get the layout location of the given time\r\n * @param {Number} _time the given time\r\n * @returns {Number} the given time\r\n */\r\nfunction getLayoutLocation(_time) {\r\n    let deltaTime = _time - this.$startTime;\r\n    const timeLength = this.$timeLength;\r\n    (deltaTime < 0) ? (deltaTime = 0) : ((deltaTime > timeLength) && (deltaTime = timeLength));\r\n    return this.$layoutStart + (this.$layoutSize / timeLength * deltaTime);\r\n}\r\n\r\n/**\r\n * pick up the scale items into an array\r\n * @param {Array} _layouts the layout storage, may be the $layouts member in the layoutRoot\r\n * @param {Array} _storage the storage to save the scale items\r\n */\r\nfunction pickupTimeScales(_layouts, _storage) {\r\n    let unitCount = 0;\r\n    _layouts.forEach(item => {\r\n        const subLayouts = item.$layouts;\r\n        if (subLayouts instanceof Array) {\r\n            unitCount += pickupTimeScales(subLayouts, _storage);\r\n        } else if (item instanceof Node) {\r\n            unitCount += \r\n                (item.$layoutUnit = (Number(item.getAttribute(\"r:time-layout-unit\")) || 1));\r\n            isNaN(item.$startTime = Date.parse(item.getAttribute(\"r:time-start\"))) && (item.$startTime = 0);\r\n            isNaN(item.$endTime = Date.parse(item.getAttribute(\"r:time-end\"))) && (item.$endTime = undefined);\r\n            _storage.push(item);\r\n        }\r\n    });\r\n    return unitCount;\r\n}\r\n\r\n/**\r\n * calculate the time data of each scale item\r\n * @param {Array} _scaleItems \r\n */\r\nfunction calculateTimeScales(_scaleItems) {\r\n    _scaleItems.$lastLocation = 0;\r\n    let endTime = undefined;\r\n    for (let i = _scaleItems.length - 1; i >= 0; i--) {\r\n        const item = _scaleItems[i];\r\n        if (endTime === undefined) {\r\n            endTime = item.$endTime;\r\n        } else {\r\n            item.$endTime = endTime;\r\n            endTime = item.$startTime;\r\n        }\r\n        assert(endTime >= item.$startTime, \"end time is less than start time\");\r\n        item.$timeLength = item.$endTime - item.$startTime;\r\n    }\r\n}\r\n\r\n// the days count of each month\r\nconst MonthDays = [31, function (_year) {\r\n    return ((((_year % 4) === 0) && ((_year % 100) !== 0)) || ((_year % 400) === 0)) ? 29 : 28;\r\n}, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n\r\n/**\r\n * get the count of days of the given month in the given year\r\n * @param {Number} _year the given year\r\n * @param {Number} _month the given month\r\n * @returns {Number}\r\n */\r\nfunction getMonthDays(_year, _month) {\r\n    let ret = MonthDays[_month];\r\n    return (typeof ret === \"function\") ? ret(_year) : ret;\r\n}\r\n\r\n/**\r\n * modify the time scale by special the new starting time\r\n * @param {*} _startTime \r\n */\r\nfunction modifyTime(_startTime) {\r\n    !(_startTime instanceof Date) && (_startTime = new Date(_startTime));\r\n    const sourceTime = new Date(this[0].$startTime);\r\n    const theYear = _startTime.getFullYear();\r\n    const deltaYear = theYear - sourceTime.getFullYear();\r\n    const theMonth = _startTime.getMonth();\r\n    const deltaMonth = theMonth - sourceTime.getMonth();\r\n    const theDay = _startTime.getDate();\r\n    const isLastDay = (theDay === getMonthDays(theYear, theMonth));\r\n    const destHours = _startTime.getHours();\r\n    const destMin = _startTime.getMinutes();\r\n    const destSec = _startTime.getSeconds();\r\n    const modifyFn = (oriTime) => {\r\n        oriTime = new Date(oriTime);\r\n        const oriMonth = oriTime.getMonth();\r\n        const oriYear = oriTime.getFullYear();\r\n        let destYear = oriYear + deltaYear, destMonth = oriMonth + deltaMonth;\r\n        if (destMonth > 12) {\r\n            destYear += 1;\r\n            destMonth -= 12;\r\n        }\r\n        const destDay = (isLastDay ? getMonthDays(destYear, destMonth) : theDay);\r\n        return (new Date(destYear, destMonth, destDay, destHours, destMin, destSec, 0)).getTime();\r\n    }\r\n    this.forEach(item => {\r\n        item.$startTime = modifyFn(item.$startTime);\r\n    });\r\n    const lastItemIndex = this.length - 1;\r\n    this[lastItemIndex].$endTime = modifyFn(this[lastItemIndex].$endTime);\r\n    calculateTimeScales(this);\r\n}\r\n\r\n/**\r\n * set the time scales by the given values\r\n * @param {Array} _scales the given scales, the last one is the end-time of the scales\r\n */\r\nfunction setTimeScales(_scales) {\r\n    assert(_scales instanceof Array, \"the parameter must be an array\");\r\n    const count = this.length;\r\n    _scales.map((item, index) => {\r\n        const time = (new Date(item)).getTime();\r\n        if (isNaN(time)) {\r\n            throw `the parameter[${index}] is not avaliable time`;\r\n        }\r\n        return time;\r\n    }).forEach((time, index) => {\r\n        (index < count) ? (this[index].$startTime = time) : (this[count - 1].$endTime = time);\r\n    });\r\n    calculateTimeScales(this);\r\n}\r\n\r\n/**\r\n * restore the time scales to the default value defined in the template\r\n */\r\nfunction restoreTimeScales() {\r\n    this.forEach(item => {\r\n        isNaN(item.$startTime = Date.parse(item.getAttribute(\"r:time-start\"))) && (item.$startTime = 0);\r\n        isNaN(item.$endTime = Date.parse(item.getAttribute(\"r:time-end\"))) && (item.$endTime = undefined);\r\n    });\r\n    calculateTimeScales(this);\r\n}\r\n\r\n/**\r\n * set the displaying content of the time scales\r\n * @param {Array} _destGroup the dest scales\r\n * @param {Array} _srcGroup the src values\r\n */\r\nfunction setTimeScalesDisplay(_destGroup, _srcGroup) {\r\n    (_destGroup instanceof Array) && (_srcGroup instanceof Array) && _srcGroup.forEach((item, index) => {\r\n        if (item != null) {\r\n            _destGroup[index].textContent = ((item.text !== undefined) ? item.text : item);\r\n            item.subGroup && setTimeScalesDisplay(_destGroup.$layouts, item.subGroup);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * restore the default displaying content of the time scales\r\n * @param {Array} _destGroup the dest scales\r\n */\r\nfunction restoreDefaultScalesDisplay(_destGroup) {\r\n    (_destGroup instanceof Array) && _destGroup.forEach(item => {\r\n        item.textContent = item.$defaultText;\r\n        item.$layouts && restoreDefaultScalesDisplay(item.$layouts);\r\n    })\r\n}\r\n\r\n/**\r\n * pick up the global layout of the timescale\r\n * the reault include the time-scale element in a tree struct and the scale items in an array\r\n * @param {*} _root \r\n * @returns {Object} the layout object {$layouts:[], scaleItems:[]}\r\n */\r\nexport function TimeScales(_root) {\r\n    // pick up each time-scale element into the layout tree\r\n    const timeElements = [..._root.querySelectorAll(\"[r\\\\:time]\")];\r\n    const rootLayouts = [];\r\n    timeElements.forEach(item => {\r\n        let parent = { $layouts: rootLayouts };\r\n        // build the layout tree according to the r:time attribute\r\n        const tags = String(item.getAttribute(\"r:time\")).split(\"-\");\r\n        const lastPos = tags.length - 1;\r\n        let key, subLayouts;\r\n        for (let i = 0; i < lastPos; i++) {\r\n            key = tags[i];\r\n            subLayouts = (parent.$layouts || (parent.$layouts = []));\r\n            parent = (subLayouts[key] || (subLayouts[key] = {}));\r\n        }\r\n        key = tags[lastPos];\r\n        subLayouts = (parent.$layouts || (parent.$layouts = []));\r\n        const existedItem = subLayouts[key];\r\n        subLayouts[key] = item;\r\n        existedItem && (item.$layouts = existedItem.$layouts);\r\n        // record the default text\r\n        item.$defaultText = item.textContent;\r\n    });\r\n    // pick up the scale items into an array\r\n    const scaleItems = [];\r\n    scaleItems.$unitCount = pickupTimeScales(rootLayouts, scaleItems);\r\n    calculateTimeScales(scaleItems);\r\n    const firstScale = scaleItems[0];\r\n    const lastScale = scaleItems[scaleItems.length - 1];\r\n    Object.defineProperties(this, {\r\n        $layouts: {\r\n            value: rootLayouts,\r\n            writable: false\r\n        },\r\n        $firstScale: {\r\n            value: firstScale,\r\n            writable: false\r\n        },\r\n        $lastScale: {\r\n            value: lastScale,\r\n            writable: false\r\n        },\r\n        $startTime: {\r\n            get: () => firstScale.$startTime\r\n        },\r\n        $endTime: {\r\n            get: () => lastScale.$endTime\r\n        },\r\n        $scaleItems: {\r\n            value: scaleItems,\r\n            writable: false\r\n        }\r\n    });\r\n    this.modifyTime = modifyTime.bind(scaleItems);\r\n    this.setTimeScales = setTimeScales.bind(scaleItems);\r\n    this.restoreTimeScales = restoreTimeScales.bind(scaleItems);\r\n    this.setDisplay = (_layout) => {\r\n        setTimeScalesDisplay(rootLayouts, _layout);\r\n    };\r\n    this.restoreDisplay = () => restoreDefaultScalesDisplay(rootLayouts);\r\n    this.findItem = findTimeScaleItem.bind(scaleItems);\r\n\r\n    // calculate the layout size of the each scale item\r\n    const timeScaleElement = _root.querySelector(\"[r\\\\:time-scale-size]\");\r\n    const timeScaleSize = timeScaleElement ? (timeScaleElement.getBBox || timeScaleElement.getBoundingClientRect).call(timeScaleElement, {stroke:true})[timeScaleElement.getAttribute(\"r:time-scale-size\")] : 0;\r\n    const unitSize = timeScaleSize / scaleItems.$unitCount;\r\n    let startPos = 0;\r\n    scaleItems.forEach(item => {\r\n        item.$layoutSize = unitSize * item.$layoutUnit;\r\n        item.$layoutStart = startPos;\r\n        item.$layoutEnd = (startPos += item.$layoutSize);\r\n        item.getLayoutLocation = getLayoutLocation.bind(item);\r\n    });\r\n\r\n    Object.seal(this);\r\n}\r\n","/**\r\n * setter for the attribute\r\n * @param {Node} _dom the node of the element\r\n * @param {String} _key the key of the attribute\r\n * @param {*} _value the value\r\n */\r\nfunction setAttribute(_dom, _key, _value) {\r\n    _dom.setAttribute(_key, _value);\r\n}\r\n\r\n/**\r\n * setter for the style\r\n * @param {Node} _dom the node of the element\r\n * @param {String} _key the key of the style\r\n * @param {*} _value the value\r\n */\r\nfunction setStyle(_dom, _key, _value) {\r\n    _dom.style[_key] = _value;\r\n}\r\n\r\n/**\r\n * setter for the text content\r\n * @param {Node} _dom the node of the element\r\n * @param {String} _key ignore\r\n * @param {*} _value the value\r\n */\r\nfunction setTextContent(_dom, _key, _value) {\r\n    _dom.textContent = _value;\r\n}\r\n\r\n// the exception for drop the setting\r\nexport const ERR_DROP = Symbol(\"roadmap.expression.drop\");\r\n// the exception for break the expression\r\nexport const ERR_BREAK = Symbol(\"roadmap.expression.break\");\r\n// the exception for break and exit the expression queue\r\nexport const ERR_EXIT = Symbol(\"roadmap.expression.exit\");\r\n\r\n// the set of the inner exeptions\r\nconst InnerExceptions = [ERR_DROP, ERR_BREAK, ERR_EXIT];\r\n\r\n// the set of the setters of the controling action\r\nconst CtrlSetters = {\r\n    $show: function (_dom, _key, _value) {\r\n        (!_value) && (_dom.remove());\r\n    },\r\n    $break: function (_dom, _key, _value) {\r\n        if (_value) {\r\n            throw ERR_BREAK;\r\n        }\r\n    },\r\n    $exit: function (_dom, _key, _value) {\r\n        if (_value) {\r\n            throw ERR_EXIT;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * the class of Exception for break expression\r\n * @class\r\n * @private\r\n * @param {*} _value the value when break\r\n * @param {*} _error the error information\r\n */\r\nfunction BreakValue(_value, _error) {\r\n    this.value = _value;\r\n    this.error = _error;\r\n}\r\n\r\n/**\r\n * check the value and throw exception if checking fail\r\n * @param {Array} _args the first element is the value to be check, the second element is the checher function or the stander value\r\n * @param {*} _error the exception\r\n * @returns the value or the BreakValue\r\n * @private\r\n */\r\nfunction checkAndThrow(_args, _error) {\r\n    try {\r\n        const { 0: value, 1: check } = _args;\r\n        if (value === check) {\r\n            throw _error;\r\n        } else if (typeof check === \"function\") {\r\n            if (check(value)) {\r\n                throw _error;\r\n            }\r\n        } else if ((_args.length <= 1) && (!value)) {\r\n            throw _error;\r\n        }\r\n        return value;\r\n    } catch (error) {\r\n        if (error instanceof BreakValue) {\r\n            return error;\r\n        } else {\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n\r\n// the object assigned to the $ symbol in the expression\r\nconst CtrlGlobal = {\r\n    break: function (_value, _check) {\r\n        return checkAndThrow(arguments, new BreakValue(_value, ERR_BREAK));\r\n    },\r\n    exit: function (_value, _check) {\r\n        return checkAndThrow(arguments, new BreakValue(_value, ERR_EXIT));\r\n    },\r\n    drop: function (_value, _check) {\r\n        return checkAndThrow(arguments, ERR_DROP);\r\n    },\r\n}\r\n\r\n/**\r\n * process the expressions, the this value should be the list expression\r\n * @param {Node} _dom the node of the element\r\n * @param {*} _project the information of the project\r\n * @param {*} _item the item information of the project\r\n * @param {*} _layout the information of the layout\r\n * @returns the exception when process expressions\r\n * @private\r\n */\r\nfunction processExpressions(_dom, _project, _item, _layout) {\r\n    try {\r\n        this.forEach(({fn, setter, key, expression}) => {\r\n            try {\r\n                if (typeof fn === \"function\") {\r\n                    const result = fn.call(_dom, _project, _item, _layout, CtrlGlobal);\r\n                    if (result instanceof BreakValue) {\r\n                        (typeof setter === \"function\") && setter(_dom, key, result.value);\r\n                        throw result.error;\r\n                    } else {\r\n                        (typeof setter === \"function\") && setter(_dom, key, result);\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                if (InnerExceptions.includes(error)) {\r\n                    if (error !== ERR_DROP) {\r\n                        throw error;\r\n                    }\r\n                } else {\r\n                    console.error(\"[Dynamic Expression Run Fail]\", expression);\r\n                    console.error(error);\r\n                }\r\n            }\r\n        });\r\n    } catch (error) {\r\n        return error;\r\n    }\r\n}\r\n\r\n/**\r\n * parse the expressions\r\n * @param {String} _expressionLine the text of the expression \r\n * @returns {Function} the instance of the function processing the expression\r\n */\r\nexport function parseExpression(_expressionLine) {\r\n    const expressionList = String(_expressionLine).split(\";\").map(item => {\r\n        item = item.trim();\r\n        if (item) {\r\n            let {0: key, 1:expression } = item.split(/(?<!\\=[^\\=]*)=/);\r\n            key = key.trim();\r\n            let setter;\r\n            if (key === \"\") {\r\n                setter = undefined;\r\n            } else if (key[0] === \"@\") {\r\n                setter = setStyle;\r\n                key = key.substr(1);\r\n            } else if (key[0] === \"$\") {\r\n                setter = CtrlSetters[key];\r\n            } else if (key[0] === \":\") {\r\n                setter = setTextContent;\r\n            } else {\r\n                setter = setAttribute;\r\n            }\r\n            try {\r\n                return {\r\n                    fn: new Function(\"project\", \"item\", \"layout\", \"$\", `return (${expression})`),\r\n                    setter,\r\n                    key,\r\n                    expression\r\n                };\r\n            } catch (error) {\r\n                console.error(\"[Dynamic Expression Parse Fail]\", expression);\r\n                return { };\r\n            }\r\n        }\r\n    });\r\n    return processExpressions.bind(expressionList);\r\n}","export default [{\r\n    caption: \"Normal Project\",\r\n    state: \"normal\",\r\n    items: [\r\n        { text: \"DR1\", start: \"2021/01/10\", end: \"2021/01/20\", state: \"finish\", progress: 1 }, \r\n        { text: \"DR2\", start: \"2021/01/20\", end: \"2021/02/01\", state: \"finish\", progress: 1 }, \r\n        { text: \"DR3\", start: \"2021/02/01\", end: \"2021/04/15\", state: \"normal\", progress: 0.5 }, \r\n        [\r\n            [\r\n                { text: \"DR4\", start: \"2021/04/15\", end: \"2021/04/30\", state: \"\", progress: 0.1 }, \r\n                { text: \"DR5\", start: \"2021/05/07\", end: \"2021/06/10\", state: \"\" },\r\n                { text: \"DR6\", start: \"2021/06/10\", end: \"2021/07/05\", state: \"\" }\r\n            ],\r\n            [\r\n                { text: \"tender\", start: \"2021/06/24\", end: \"2021/06/26\", state: \"\" },\r\n                { text: \"experimental\", start: \"2021/06/30\", end: \"2021/08/17\", state: \"\" }\r\n            ]\r\n        ],\r\n        { text: \"be online\", start: \"2021/09/01\", end: \"2021/09/02\", state: \"\" }\r\n    ]\r\n}, {\r\n    caption: \"Warn Project\",\r\n    state: \"warn\",\r\n    items: [\r\n        { text: \"DR1\", start: \"2021/03/08\", end: \"2021/03/30\", state: \"finish\", progress: 1 },\r\n        { text: \"DR2\", start: \"2021/03/30\", end: \"2021/04/10\", state: \"finish\", progress: 1 },\r\n        { text: \"DR3\", start: \"2021/04/10\", end: \"2021/05/26\", state: \"delay\", progress: 0.2 },\r\n        { text: \"DR4\", start: \"2021/06/01\", end: \"2021/06/15\", state: \"\", progress: 0 },\r\n        [\r\n            [\r\n                { text: \"DR5\", start: \"2021/06/17\", end: \"2021/07/15\", state: \"\", progress: 0 },\r\n                { text: \"DR6\", start: \"2021/07/20\", end: \"2021/08/10\", state: \"\", progress: 0 }\r\n            ],\r\n            { text: \"DEMO\", start: \"2021/06/26\", end: \"2021/07/07\", state: \"\", progress: 0 }\r\n        ]\r\n    ]\r\n}];","import { assert } from \"./toolkits/src/assert\";\r\nimport { readonlyMember } from \"./toolkits/src/readonly\";\r\nimport NS from \"./ns\";\r\nimport { TimeScales } from \"./timeScale\";\r\nimport { ERR_BREAK, ERR_EXIT, parseExpression } from \"./expression\";\r\nimport defaultSampleProjects from \"./sampleProjects\";\r\n\r\n// private data symbol\r\nconst $timeScales = Symbol(\"roadmap.timeScales\");\r\nconst $dyncFuns = Symbol(\"roadmap.dyncFunctions\");\r\n\r\n/**\r\n * process the dynamic expression\r\n * @param {Node} _dom the node the element\r\n * @param {String} _attrTag the name of the attribute which contains the dynamic expression\r\n * @param {*} _project the information of the project\r\n * @param {*} _item the information of the item of the project\r\n * @param {*} _layout the information of the layout\r\n * @returns the exception while processing the expression\r\n * @private\r\n */\r\nfunction processDync(_dom, _attrTag, _project, _item, _layout) {\r\n    const fn = this[$dyncFuns].get(_dom.getAttribute(_attrTag));\r\n    return (typeof fn === \"function\") && fn(_dom, _project, _item, _layout);\r\n}\r\n\r\n/**\r\n * process all the dynamic expressions in the dom tree\r\n * @param {Node} _dom the node the root element\r\n * @param {String} _attrTag the name of the attribute which contains the dynamic expression\r\n * @param {*} _project the information of the project\r\n * @param {*} _item the information of the item of the project\r\n * @param {*} _layout the information of the layout\r\n * @private\r\n */\r\nfunction processAllDync(_rootDOM, _attrTag, _project, _item, _layout) {\r\n    [..._rootDOM.querySelectorAll(`[${_attrTag.replace(\":\", \"\\\\:\")}]`)].forEach(dom => {\r\n        const fn = this[$dyncFuns].get(dom.getAttribute(_attrTag));\r\n        (typeof fn === \"function\") && fn(dom, _project, _item, _layout);\r\n    });\r\n    const fn = this[$dyncFuns].get(_rootDOM.getAttribute(_attrTag));\r\n    (typeof fn === \"function\") && fn(_rootDOM, _project, _item, _layout);\r\n}\r\n\r\n/**\r\n * show the items of the project\r\n * @param {Array} _items the items of the project\r\n * @param {Node} _group the node of the group element as the container of the items\r\n * @param {*} _project the information of the project\r\n * @param {*} _layout the information of the layout\r\n * @private\r\n */\r\nfunction showProjectItems(_items, _group, _project, _layout) {\r\n    const template = this.template;\r\n    const itemDOMList = [];\r\n    const oriItemLocalIndex = _layout.itemLocalIndex;\r\n    let subGroupCount = 0;\r\n    _layout.itemLocalIndex = 0;\r\n    // process each item\r\n    _items.forEach((projectItem) => {\r\n        if (projectItem instanceof Array) {\r\n            // if the item is an array means the item has subgroup\r\n            subGroupCount ++;\r\n            const itemDOM = document.createElementNS(NS.SVG, \"g\");\r\n            if (itemDOM) {\r\n                _group.appendChild(itemDOM);\r\n                itemDOMList.push(itemDOM);\r\n                let itemPos = 0;\r\n                // process each subgroup of the current group\r\n                projectItem.forEach((subItems) => {\r\n                    const subGroup = document.createElementNS(NS.SVG, \"g\");\r\n                    if (subGroup) {\r\n                        itemDOM.appendChild(subGroup);\r\n                        showProjectItems.call(this, (subItems instanceof Array) ? subItems : [subItems], subGroup, _project, _layout);\r\n                        template.setTransform(subGroup, itemPos, 0);\r\n                        itemPos += template.getSize(subGroup) + this.parameters.itemMargin;\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            // process the pure item\r\n            // prepare the layout information\r\n            const startTime = ((typeof projectItem.start === \"number\") ? projectItem.start : Date.parse(projectItem.start));\r\n            const endTime = ((typeof projectItem.end === \"number\") ? projectItem.end : Date.parse(projectItem.end));\r\n            const startLayoutScale = this[$timeScales].findItem(startTime);\r\n            // only continue while the starting scale is found\r\n            if (startLayoutScale && (endTime > startTime)) {\r\n                _layout.itemStart = startLayoutScale.getLayoutLocation(startTime);\r\n                const endLayoutScale = this[$timeScales].findItem(endTime);\r\n                if (!endLayoutScale) {\r\n                    _layout.itemEnd = ((endTime >= this[$timeScales].$endTime) ? this[$timeScales].$lastScale.$layoutEnd : startLayoutScale.$layoutStart);\r\n                } else {\r\n                    _layout.itemEnd = endLayoutScale.getLayoutLocation(endTime);\r\n                }\r\n                _layout.itemSize = _layout.itemEnd - _layout.itemStart;\r\n\r\n                // template process\r\n                const itemDOM = template.item.cloneNode(true);\r\n                if (itemDOM) {\r\n                    projectItem.id && itemDOM.setAttribute(\"data-item-id\", projectItem.id);\r\n                    _group.appendChild(itemDOM);\r\n                    itemDOMList.push(itemDOM);\r\n                    processAllDync.call(this, itemDOM, \"r:dync\", _project, projectItem, _layout);\r\n                }\r\n            }\r\n            _layout.itemIndex ++;\r\n        }\r\n        _layout.itemLocalIndex ++;\r\n    });\r\n    \r\n    // centers the item in the group\r\n    const groupSize = (_layout.itemZoneSize = template.getSize(_group));\r\n    if (subGroupCount > 0) {\r\n        itemDOMList.forEach((itemDOM) => {\r\n            const itemSize = template.getSize(itemDOM);\r\n            template.setTransform(itemDOM, (groupSize - itemSize) / 2, 0);\r\n        });\r\n    }\r\n\r\n    _layout.itemLocalIndex = oriItemLocalIndex;\r\n}\r\n\r\n/**\r\n * show the caption of the project\r\n * @param {*} _project the information of the project\r\n * @param {Node} _group the node of the element as the container of the project\r\n * @param {*} _layout the information of the layout\r\n * @private\r\n */\r\nfunction showProjectCaption(_project, _group, _layout) {\r\n    const template = this.template;\r\n    const captionDOM = template.caption.cloneNode(true);\r\n    _group.appendChild(captionDOM);\r\n\r\n    processAllDync.call(this, captionDOM, \"r:dync\", _project, {}, _layout);\r\n    const zoneSize = template.getSize(_group);\r\n    const size = template.getSize(captionDOM);\r\n    template.setTransform(captionDOM, (zoneSize - size) / 2, 0);\r\n}\r\n\r\n// the functions set of the layout in horizontal or vertical situation\r\nconst LayoutHelper = {\r\n    horizontal: {\r\n        getSize: function (_dom) {\r\n            return _dom ? (_dom.getBBox || _dom.getBoundingClientRect).call(_dom, {stroke:true}).height : 0;\r\n        },\r\n        setTransform: function (_dom, _position, _offset) {\r\n            _dom && _dom.setAttribute(\"transform\", `matrix(1,0,0,1,${Number(_offset) || 0},${Number(_position) || 0})`);\r\n        }\r\n    },\r\n    vertical: {\r\n        getSize: function (_dom) {\r\n            return _dom ? (_dom.getBBox || _dom.getBoundingClientRect).call(_dom, {stroke:true}).width : 0;\r\n        },\r\n        setTransform: function (_dom, _position, _offset) {\r\n            _dom && _dom.setAttribute(\"transform\", `matrix(1,0,0,1,${Number(_position) || 0},${Number(_offset) || 0})`);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * pick up the parameters of the template\r\n * @returns {Object} the paramters object\r\n * @private\r\n */\r\nfunction pickParameters() {\r\n    const projectTemplate = this.template.global;\r\n    let sampleProjects = this.svg.querySelector(\"[r\\\\:tag='sample-projects']\");\r\n    if (sampleProjects) {\r\n        try {\r\n            sampleProjects = JSON.parse(String(sampleProjects.innerHTML).replace(/(^[^\\{]*)|([^\\}]*$)/g, \"\"));\r\n            (sampleProjects instanceof Array) || (sampleProjects = [sampleProjects]);\r\n        } catch {\r\n            sampleProjects = defaultSampleProjects;\r\n        }\r\n    } else {\r\n        sampleProjects = defaultSampleProjects;\r\n    }\r\n    return {\r\n        itemMargin: (Number(projectTemplate.getAttribute(\"r:item-margin\")) || 0),\r\n        projectMargin: (Number(projectTemplate.getAttribute(\"r:project-margin\")) || 0),\r\n        sampleProjects,\r\n        maxZoneSize: (Number(this.zone.getAttribute(\"r:max-size\")) || 0),\r\n        primeDateMap: ((str) => (str && String(str).trim()))(this.zone.getAttribute(\"r:prime-date-map\"))\r\n    };\r\n}\r\n\r\nfunction calcMonthCount(_start, _end) {\r\n    const ret = {};\r\n    if (_start <= _end) {\r\n        const yearEnd = _end.getFullYear();\r\n        const monthEnd = _end.getMonth();\r\n        for(let yearStart = _start.getFullYear(), monthStart = _start.getMonth();\r\n            yearStart <= yearEnd; \r\n            yearStart++, monthStart = 0) {\r\n            const monthCount = (yearStart < yearEnd) ? (12 - monthStart) : (monthEnd - monthStart + 1);\r\n            ret[yearStart] = monthCount;\r\n        }\r\n    }\r\n    return ret;\r\n}\r\n\r\n/**\r\n * @module Roadmap\r\n * @example\r\n * const roadmap = require('roadmap.svg.js')\r\n */\r\n\r\n/**\r\n * @constructor Roadmap\r\n * @param {Node} _container the node of the element as the container of the roadmap\r\n * @param {SVGSVGElement} _svgTemplate an instance of SVG as the template of the roadmap\r\n * @public\r\n */\r\nexport default class Roadmap {\r\n    static VERSION = __VERSION__;\r\n    static STAMP = `STAMP${__STAMP__ || \"no stamp\"}`;\r\n\r\n    /**\r\n     * create a new instance of a roadmap\r\n     * @constructor Roadmap\r\n     * @param {Node} _container the node of the element as the container of the roadmap\r\n     * @param {SVGSVGElement} _svgTemplate an instance of SVG as the template of the roadmap\r\n     * @public\r\n     */\r\n    constructor(_container, _svgTemplate) {\r\n        assert((_container instanceof Node) && _container.isConnected, \"_container must be an Node connected to a DOM tree\");\r\n        assert(_svgTemplate instanceof SVGSVGElement, \"_svgTemplate must be an instance of <SVG>\");\r\n\r\n        // render the template into the container\r\n        _container.innerHTML = \"\";\r\n        _container.appendChild(_svgTemplate);\r\n        \r\n        // pick up the canvas zone, the template zone, and the layout of the time scales\r\n        const zone = _svgTemplate.querySelector(\"[r\\\\:tag='roadmap-zone']\");\r\n        const projectTemplate = _svgTemplate.querySelector(\"[r\\\\:tag='project-template']\");\r\n        assert(zone && projectTemplate, \"incorrect template\");\r\n        readonlyMember(this, $timeScales, new TimeScales(_svgTemplate));\r\n\r\n        // parser the dynamic expressions\r\n        const dyncFuncs = new Map();\r\n        [..._svgTemplate.querySelectorAll(\"[r\\\\:dync]\")].forEach((item, index) => {\r\n            const tag = `dync${index}`;\r\n            dyncFuncs.set(tag, parseExpression(item.getAttribute(\"r:dync\")));\r\n            item.setAttribute(\"r:dync\", tag);\r\n        });\r\n        [..._svgTemplate.querySelectorAll(\"[r\\\\:dync-project]\")].forEach((item, index) => {\r\n            const tag = `zone${index}`;\r\n            dyncFuncs.set(tag, parseExpression(item.getAttribute(\"r:dync-project\")));\r\n            item.setAttribute(\"r:dync-project\", tag);\r\n        });\r\n        readonlyMember(this, $dyncFuns, dyncFuncs);\r\n\r\n        // pickup the template items\r\n        const projectGroup = projectTemplate.querySelector(\"[r\\\\:tag='project-group']\");\r\n        const caption = projectTemplate.querySelector(\"[r\\\\:tag='project-caption']\");\r\n        const itemZone = projectTemplate.querySelector(\"[r\\\\:tag='project-item-zone']\");\r\n        const item = projectTemplate.querySelector(\"[r\\\\:tag='project-item']\");\r\n        assert(projectGroup && caption && itemZone && item, \"incorrect template\");\r\n        projectGroup.remove();\r\n        caption.remove();\r\n        itemZone.remove();\r\n        item.remove();\r\n        const helperSelect = LayoutHelper[projectTemplate.getAttribute(\"r:grow-direction\") === \"vertical\" ? \"vertical\" : \"horizontal\"];\r\n\r\n        // the global dynamic expression must be pick up after remove the detail template from the global template\r\n        const dyncGlobals = [..._svgTemplate.querySelectorAll(\"[r\\\\:dync-global]\")];\r\n        dyncGlobals.forEach((item, index) => {\r\n            const tag = `global${index}`;\r\n            dyncFuncs.set(tag, parseExpression(item.getAttribute(\"r:dync-global\")));\r\n            item.setAttribute(\"r:dync-global\", tag);\r\n        });\r\n        projectTemplate.remove();\r\n\r\n        readonlyMember(this, {\r\n            svg: _svgTemplate,\r\n            zone,\r\n            template: Object.freeze({\r\n                global: projectTemplate,\r\n                projectGroup,\r\n                caption,\r\n                itemZone,\r\n                item,\r\n                dyncGlobals,\r\n                getSize: helperSelect.getSize,\r\n                setTransform: helperSelect.setTransform\r\n            })\r\n        });\r\n\r\n        readonlyMember(this, \"parameters\", pickParameters.call(this));\r\n    }\r\n\r\n    /**\r\n     * get the starting time of the roadmap\r\n     */\r\n    get startTime() {\r\n        return new Date(this[$timeScales].$startTime);\r\n    }\r\n\r\n    /**\r\n     * get the ending time of the roadmap\r\n     */\r\n    get endTime() {\r\n        return new Date(this[$timeScales].$endTime);\r\n    }\r\n\r\n    /**\r\n     * set the starting time of the roadmap\r\n     */\r\n    set startTime(_value) {\r\n        this[$timeScales].modifyTime(_value);\r\n    }\r\n\r\n    /**\r\n     * set the prime date of the roadmap\r\n     * The start day may be map if the roadmap template has the \"r:prime-date-map\" parameter.\r\n     * This method change the start time of the roadmap without change the display of the time's scale\r\n     * @param {*} _date \r\n     */\r\n    setPrimeDate(_date) {\r\n        _date = new Date(_date);\r\n        const mapFn = this.parameters.primeDateMap ? new Function(\"year\", \"month\", \"day\", `return ${this.parameters.primeDateMap}`) : undefined;\r\n        this.startTime = mapFn ? new Date(mapFn(_date.getFullYear(), _date.getMonth() + 1, _date.getDate())) : _date;\r\n    }\r\n\r\n    /**\r\n     * set the time scales\r\n     * @param {Array} _scales the set of the starting times for each time scale, the last one is the ending time of the roadmap\r\n     */\r\n    setTimeScales(_scales) {\r\n        this[$timeScales].setTimeScales(_scales);\r\n    }\r\n\r\n    /**\r\n     * restore the default time scales which defined in the template\r\n     */\r\n    restoreTimeScales() {\r\n        this[$timeScales].restoreTimeScales();\r\n    }\r\n\r\n    /**\r\n     * set the displaying text of the time scales\r\n     * @param {Array} _layout   the display informations of the time scales. \r\n     *                          They stored as the struct of the layout. \r\n     *                          Each item should be an object, in which has \"text\" property means the displaying text, and \"subGroup\" property means the child items in the layout tree\r\n     */\r\n    setTimeScalesDisplay(_layout) {\r\n        this[$timeScales].setDisplay(_layout);\r\n    }\r\n\r\n    /**\r\n     * restore the default displaying text of the time scales defined in the template\r\n     */\r\n    restoreTimeScalesDisplay() {\r\n        this[$timeScales].restoreDisplay();\r\n    }\r\n\r\n    /**\r\n     * clear the content of the roadmap\r\n     */\r\n    clear() {\r\n        this.zone.innerHTML = \"\";\r\n    }\r\n\r\n    /**\r\n     * show the projects in the roadmap\r\n     * @param  {...Object} _projects the set of the projects' information\r\n     * @returns {undefined|Array<Object>} the set of projects' information which don't show in the roadmap, it often occur in the max-size has been specified in the roadmap\r\n     */\r\n    showProject(..._projects) {\r\n        const projectCount = _projects.length;\r\n        if (projectCount > 0) {\r\n            this.clear();\r\n            let groupPos = 0;\r\n            const template = this.template;\r\n            const breakState = {};\r\n            try {\r\n                _projects.forEach((project, projectIndex) => {\r\n                    // prepare the project group\r\n                    const layout = { projectIndex, itemIndex: 0 };\r\n                    const group = template.projectGroup.cloneNode(true);\r\n                    if (group) {\r\n                        this.zone.appendChild(group);\r\n                        // prepare the project zone and item zone\r\n                        const projectZone = group.querySelector(\"[r\\\\:tag='project-zone']\") || group;\r\n                        const itemZone = template.itemZone.cloneNode(false);\r\n                        projectZone.appendChild(itemZone);\r\n                        // show items of the current project\r\n                        const items = project.items;\r\n                        (items instanceof Array) && showProjectItems.call(this, items, itemZone, project, layout);\r\n                        // show caption of the current project\r\n                        showProjectCaption.call(this, project, projectZone, layout);\r\n                        layout.projectZoneSize = template.getSize(projectZone);\r\n                        // process and layout the project group\r\n                        group.setAttribute(\"data-project-index\", projectIndex);\r\n                        project.id && group.setAttribute(\"data-project-id\", project.id);\r\n                        processAllDync.call(this, group, \"r:dync-project\", project, {}, layout);\r\n                        layout.projectSize = template.getSize(group);\r\n                        if (this.parameters.maxZoneSize > 0) {\r\n                            const deltaSize = parseInt(this.parameters.maxZoneSize - layout.projectSize - template.getSize(this.zone));\r\n                            if (deltaSize === 0) {\r\n                                (projectIndex < (projectCount - 1)) && (breakState.index = projectIndex + 1);\r\n                            } else if (deltaSize < 0) {\r\n                                group.remove();\r\n                                breakState.index = projectIndex;\r\n                            }\r\n                        }\r\n                        if (group.isConnected) {\r\n                            template.setTransform(group, groupPos, 0);\r\n                            layout.globalZoneSize = template.getSize(this.zone);\r\n                            // process global dynamic expression\r\n                            template.dyncGlobals.forEach(globalDyncItemDom => {\r\n                                const err = processDync.call(this, globalDyncItemDom, \"r:dync-global\", project, {}, layout);\r\n                                if ((err === ERR_EXIT) && (projectIndex < (projectCount - 1))) {\r\n                                    breakState.index = projectIndex + 1;\r\n                                    throw breakState;\r\n                                }\r\n                            });\r\n                            // calculate the position of the next project\r\n                            groupPos += template.getSize(group) + this.parameters.projectMargin;\r\n                        }\r\n                        if (breakState.index !== undefined) {\r\n                            throw breakState;\r\n                        }\r\n                    }\r\n                });\r\n            } catch (error) {\r\n                if (error === breakState) {\r\n                    return _projects.slice(breakState.index);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * show the projects in the roadmap\r\n     * @param {Array<Object>} _projects the set of the projects' information\r\n     * @returns {undefined|Array<Object>} the set of projects' information which don't show in the roadmap, it often occur in the max-size has been specified in the roadmap\r\n     */\r\n    showProjects(_projects) {\r\n        return (_projects instanceof Array) && this.showProject.apply(this, _projects);\r\n    }\r\n\r\n    /**\r\n     * show the sample project in the roadmap\r\n     * @returns {undefined|Array<Object>} the set of projects' information which don't show in the roadmap, it often occur in the max-size has been specified in the roadmap\r\n     */\r\n    showSample() {\r\n        return this.showProject.apply(this, this.parameters.sampleProjects);\r\n    }\r\n\r\n    /**\r\n     * convert the roadmap to an image object\r\n     * @returns {Promise<Image>} the image of the roadmap\r\n     */\r\n    toImage() {\r\n        return new Promise((resolve, reject) => {\r\n            const serializer = new XMLSerializer();\r\n            const source = '<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n' + serializer.serializeToString(this.svg);\r\n            const image = new Image();\r\n            image.src = \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent(source);\r\n            image.onload = () => resolve(image);\r\n            image.onerror = (e) => reject(e);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * convert the roadmap to the data of a image\r\n     * @param {String} _type the type of the image, \"png\" will be taken as default when ignore this parameter\r\n     * @returns {Promise<String>} the data of the image of the roadmap\r\n     */\r\n    async toImageData(_type) {\r\n        return this.toImage().then(image => {\r\n            const { width, height } = image;\r\n            const canvas = document.createElement(\"canvas\");\r\n            canvas.width = width;\r\n            canvas.height = height;\r\n            const context = canvas.getContext(\"2d\");\r\n            context.fillStyle = 'rgba(255,255,255,0)';\r\n            context.fillRect(0, 0, width, height);\r\n            context.drawImage(image, 0, 0);  \r\n            return {\r\n                width,\r\n                height,\r\n                data: canvas.toDataURL(`image/${_type || \"png\"}`)\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Infer the prime year of the given projects\r\n     * @param  {...Object} _projects the set of the projects' information\r\n     * @returns {Number|String} the prime year\r\n     */\r\n    static inferPrimeYear(..._projects) {\r\n        const record = {};\r\n\r\n        const processItem = (item) => {\r\n            if (item instanceof Array) {\r\n                item.forEach(processItem);\r\n            } else {\r\n                const monthCountSet = calcMonthCount(new Date(item.start), new Date(item.end));\r\n                for (let year in monthCountSet) {\r\n                    const monthCount = monthCountSet[year];\r\n                    const oldCount = record[year];\r\n                    if (!oldCount || (oldCount < monthCount)) {\r\n                        record[year] = monthCount;\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        _projects.forEach(project => project.items.forEach(processItem));\r\n\r\n        let primeYear = Number.MAX_SAFE_INTEGER, monthCount = 0;\r\n        for (let year in record) {\r\n            const newCount = record[year];\r\n            if ((newCount > monthCount) || ((newCount === monthCount) && (year < primeYear))) {\r\n                primeYear = year;\r\n                monthCount = newCount;\r\n            }\r\n        }\r\n\r\n        return primeYear;\r\n    }\r\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_defineProperty","obj","_arrayLikeToArray","arr","len","arr2","Array","_toConsumableArray","isArray","arrayLikeToArray","arrayWithoutHoles","iter","Symbol","iterator","from","iterableToArray","o","minLen","n","prototype","toString","call","slice","constructor","name","test","unsupportedIterableToArray","TypeError","nonIterableSpread","assert","_cond","_error","apply","undefined","arguments","_typeof","readonlyMember","_obj","_prop","_value","item","freeze","SVG","ROADMAP","findTimeScaleItem","_time","this","index","$lastLocation","stepIndex","$startTime","$endTime","getLayoutLocation","deltaTime","timeLength","$timeLength","$layoutStart","$layoutSize","pickupTimeScales","_layouts","_storage","unitCount","forEach","subLayouts","$layouts","Node","$layoutUnit","Number","getAttribute","isNaN","Date","parse","push","calculateTimeScales","_scaleItems","endTime","MonthDays","_year","getMonthDays","_month","ret","modifyTime","_startTime","sourceTime","theYear","getFullYear","deltaYear","theMonth","getMonth","deltaMonth","theDay","getDate","isLastDay","destHours","getHours","destMin","getMinutes","destSec","getSeconds","modifyFn","oriTime","oriMonth","destYear","destMonth","destDay","getTime","lastItemIndex","setTimeScales","_scales","count","map","time","_this","restoreTimeScales","setTimeScalesDisplay","_destGroup","_srcGroup","textContent","text","subGroup","restoreDefaultScalesDisplay","$defaultText","TimeScales","_root","timeElements","querySelectorAll","rootLayouts","parent","tags","String","split","lastPos","existedItem","scaleItems","$unitCount","firstScale","lastScale","defineProperties","$firstScale","$lastScale","get","$scaleItems","bind","setDisplay","_layout","restoreDisplay","findItem","timeScaleElement","querySelector","unitSize","getBBox","getBoundingClientRect","stroke","startPos","$layoutEnd","seal","setAttribute","_dom","_key","setStyle","style","setTextContent","ERR_DROP","ERR_BREAK","ERR_EXIT","InnerExceptions","CtrlSetters","$show","remove","$break","$exit","BreakValue","checkAndThrow","_args","check","CtrlGlobal","_check","exit","drop","processExpressions","_project","_item","fn","setter","expression","result","includes","console","parseExpression","_expressionLine","expressionList","trim","substr","Function","caption","state","items","start","end","progress","$timeScales","$dyncFuns","processDync","_attrTag","processAllDync","_rootDOM","replace","dom","showProjectItems","_items","_group","template","itemDOMList","oriItemLocalIndex","itemLocalIndex","subGroupCount","projectItem","itemDOM","document","createElementNS","NS","appendChild","itemPos","subItems","_this2","setTransform","getSize","parameters","itemMargin","startTime","startLayoutScale","itemStart","endLayoutScale","itemEnd","itemSize","cloneNode","id","itemIndex","groupSize","itemZoneSize","showProjectCaption","captionDOM","zoneSize","size","LayoutHelper","horizontal","height","_position","_offset","vertical","width","pickParameters","str","projectTemplate","global","sampleProjects","svg","JSON","innerHTML","defaultSampleProjects","projectMargin","maxZoneSize","zone","primeDateMap","calcMonthCount","_start","_end","yearEnd","monthEnd","yearStart","monthStart","monthCount","Roadmap","_container","_svgTemplate","instance","Constructor","isConnected","SVGSVGElement","dyncFuncs","Map","tag","set","projectGroup","itemZone","helperSelect","dyncGlobals","protoProps","staticProps","_date","mapFn","_projects","projectCount","clear","groupPos","breakState","project","projectIndex","layout","group","_this3","projectZone","projectZoneSize","projectSize","deltaSize","parseInt","globalZoneSize","globalDyncItemDom","showProject","source","XMLSerializer","serializeToString","_this4","image","Image","src","encodeURIComponent","onload","onerror","e","_type","toImage","canvas","createElement","context","getContext","fillStyle","fillRect","drawImage","data","toDataURL","self","args","err","record","processItem","monthCountSet","year","oldCount","primeYear","MAX_SAFE_INTEGER","newCount"],"mappings":"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"}